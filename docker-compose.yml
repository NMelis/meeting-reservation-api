---

# Default compose file for development and production.
# Should be used directly in development.
# Automatically loads `docker-compose.override.yml` if it exists.
# No extra steps required.
# Should be used together with `docker/docker-compose.prod.yml`
# in production.

services:
  db:
    image: "postgres:17-alpine"
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - postgres-net
    env_file: ./config/.env

  web:
    <<: &web
      # Image name is changed in production:
      image: "meeting-reservation:dev"
      build:
        target: development_build
        context: .
        dockerfile: ./docker/django/Dockerfile
        args:
          DJANGO_ENV: development
        cache_from:
          - "meeting-reservation:dev"
          - "meeting-reservation:latest"
          - "*"
      volumes:
        - django-static:/var/www/django/static
      depends_on:
        - db
      networks:
        - web-net
        - postgres-net
      env_file: ./config/.env
      environment:
        DJANGO_DATABASE_HOST: db
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.meeting.rule=Host(`meeting.duckvpn.app`)"
        - "traefik.http.routers.meeting.entrypoints=http"
        - "traefik.http.routers.meeting.middlewares=https-redirect"
        - "traefik.http.routers.meeting-secure.rule=Host(`meeting.duckvpn.app`)"
        - "traefik.http.routers.meeting-secure.entrypoints=https"
        - "traefik.http.routers.meeting-secure.tls.certresolver=route53"
        - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
        - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
        - "traefik.http.services.meeting.loadbalancer.server.port=8282"
    command: python -We -bb manage.py runserver 0.0.0.0:8282

# This task is an example of how to extend existing ones:
#   some_worker:
#     <<: *web
#     command: python manage.py worker_process

networks:
  # Network for postgres, use it for services that need access to the db:
  postgres-net:
  # Network for your internals, use it by default:
  web-net:
  proxy:
    name: proxy
    external: true

volumes:
  postgres-data:
  django-static:
