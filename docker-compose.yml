---

# Default compose file for development and production.
# Should be used directly in development.
# Automatically loads `docker-compose.override.yml` if it exists.
# No extra steps required.
# Should be used together with `docker/docker-compose.prod.yml`
# in production.

services:
  db:
    image: "postgres:17-alpine"
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - postgres-net
    env_file: ./config/.env

  web:
    <<: &web
      # Image name is changed in production:
      image: "meeting-reservation:dev"
      build:
        target: development_build
        context: .
        dockerfile: ./docker/django/Dockerfile
        args:
          DJANGO_ENV: development
        cache_from:
          - "meeting-reservation:dev"
          - "meeting-reservation:latest"
          - "*"

      volumes:
        - django-static:/var/www/django/static
      depends_on:
        - db
      networks:
        - web-net
        - postgres-net
      env_file: ./config/.env
      environment:
        DJANGO_DATABASE_HOST: db

    command: python -We -bb manage.py runserver 0.0.0.0:8000

# This task is an example of how to extend existing ones:
#   some_worker:
#     <<: *web
#     command: python manage.py worker_process

networks:
  # Network for postgres, use it for services that need access to the db:
  postgres-net:
  # Network for your internals, use it by default:
  web-net:

volumes:
  postgres-data:
  django-static:
